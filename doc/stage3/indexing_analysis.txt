Advanced query 1: Punctuality analysis

For every airport, this advanced query looks at the number of affected flights (i.e. delayed, cancelled, or diverted due to any reason).

EXPLAIN ANALYZE
select r.ORIGIN_AIRPORT, count(r.ORIGIN_AIRPORT) as 'number of flights affected per origin airport'
from red_flights r join cancel c on r.Unique_flight = c.Unique_flight
where (CHAR_LENGTH(r.ORIGIN_AIRPORT) = 3) and ((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or (c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0))
group by r.ORIGIN_AIRPORT;

BEFORE INDEXING:
-> Table scan on <temporary>  (actual time=2999.893..3000.005 rows=313 loops=1)
    -> Aggregate using temporary table  (actual time=2999.890..2999.890 rows=313 loops=1)
        -> Nested loop inner join  (cost=198497.33 rows=428841) (actual time=0.177..2733.871 rows=108492 loops=1)
            -> Filter: (((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or (c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0)) and (c.Unique_flight is not null))  (cost=48402.90 rows=428841) (actual time=0.115..1789.342 rows=108492 loops=1)
                -> Table scan on c  (cost=48402.90 rows=478659) (actual time=0.104..851.632 rows=480000 loops=1)
            -> Filter: (char_length(r.ORIGIN_AIRPORT) = 3)  (cost=0.25 rows=1) (actual time=0.008..0.008 rows=1 loops=108492)
                -> Single-row index lookup on r using PRIMARY (Unique_flight=c.Unique_flight)  (cost=0.25 rows=1) (actual time=0.008..0.008 rows=1 loops=108492)

AFTER INDEXING ON UNIQUE_FLIGHTS OF RED_FLIGHTS:

create index Unq_flt on red_flights(Unique_flight);
EXPLAIN ANALYZE
select r.ORIGIN_AIRPORT, count(r.ORIGIN_AIRPORT) as 'number of flights affected per origin airport'
-- select airline
from red_flights r join cancel c on r.Unique_flight = c.Unique_flight
where (CHAR_LENGTH(r.ORIGIN_AIRPORT) = 3) and ((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or 
(c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0))
group by r.ORIGIN_AIRPORT

Table scan on <temporary>  (actual time=3432.297..3432.392 rows=313 loops=1)
    -> Aggregate using temporary table  (actual time=3432.294..3432.294 rows=313 loops=1)
        -> Nested loop inner join  (cost=520096.44 rows=428841) (actual time=0.135..3288.652 rows=108492 loops=1)
            -> Filter: (((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or (c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0)) and (c.Unique_flight is not null))  (cost=48402.90 rows=428841) (actual time=0.111..1695.509 rows=108492 loops=1)
                -> Table scan on c  (cost=48402.90 rows=478659) (actual time=0.100..867.787 rows=480000 loops=1)
            -> Filter: (char_length(r.ORIGIN_AIRPORT) = 3)  (cost=1.00 rows=1) (actual time=0.014..0.014 rows=1 loops=108492)
                -> Single-row index lookup on r using PRIMARY (Unique_flight=c.Unique_flight)  (cost=1.00 rows=1) (actual time=0.014..0.014 rows=1 loops=108492)

Table scan on <temporary>  (actual time=3259.425..3260.050 rows=313 loops=1)
    -> Aggregate using temporary table  (actual time=3259.423..3259.423 rows=313 loops=1)
        -> Nested loop inner join  (cost=520096.44 rows=428841) (actual time=0.140..2735.862 rows=108492 loops=1)
            -> Filter: (((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or (c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0)) and (c.Unique_flight is not null))  (cost=48402.90 rows=428841) (actual time=0.114..1669.091 rows=108492 loops=1)
                -> Table scan on c  (cost=48402.90 rows=478659) (actual time=0.103..1096.706 rows=480000 loops=1)
            -> Filter: (char_length(r.ORIGIN_AIRPORT) = 3)  (cost=1.00 rows=1) (actual time=0.009..0.010 rows=1 loops=108492)
                -> Single-row index lookup on r using PRIMARY (Unique_flight=c.Unique_flight)  (cost=1.00 rows=1) (actual time=0.009..0.009 rows=1 loops=108492)



AFTER INDEXING ON UNIQUE FLIGHT OF CANCELLATION:

-> Table scan on <temporary>  (actual time=2818.698..2818.802 rows=313 loops=1)
    -> Aggregate using temporary table  (actual time=2818.696..2818.696 rows=313 loops=1)
        -> Nested loop inner join  (cost=198497.33 rows=428841) (actual time=0.132..2559.909 rows=108492 loops=1)
            -> Filter: (((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or (c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0)) and (c.Unique_flight is not null))  (cost=48402.90 rows=428841) (actual time=0.110..1768.954 rows=108492 loops=1)
                -> Table scan on c  (cost=48402.90 rows=478659) (actual time=0.099..1092.274 rows=480000 loops=1)
            -> Filter: (char_length(r.ORIGIN_AIRPORT) = 3)  (cost=0.25 rows=1) (actual time=0.007..0.007 rows=1 loops=108492)
                -> Single-row index lookup on r using PRIMARY (Unique_flight=c.Unique_flight)  (cost=0.25 rows=1) (actual time=0.007..0.007 rows=1 loops=108492)

AFTER INDEXING ON COMPOSITE INDEX FOR ALL SOURCES OF DATA

mysql> create index cancel_true on cancel(CANCELLED, DIVERTED, AIR_SYSTEM_DELAY, SECURITY_DELAY, AIRLINE_DELAY, LATE_AIRCRAFT_DELAY, WEATHER_DELAY);
Query OK, 0 rows affected (12.82 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> EXPLAIN ANALYZE select r.ORIGIN_AIRPORT, count(r.ORIGIN_AIRPORT) as 'number of flights affected per origin airport'  from red_flights r join cancel c on r.Unique_flight = c.Unique_flight where (CHAR_LENGTH(r.ORIGIN_AIRPORT) = 3) and ((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or  (c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0)) group by r.ORIGIN_AIRPORT;
-> Table scan on <temporary>  (actual time=3105.994..3106.089 rows=313 loops=1)
    -> Aggregate using temporary table  (actual time=3105.992..3105.992 rows=313 loops=1)
        -> Nested loop inner join  (cost=520096.44 rows=428841) (actual time=0.153..2966.715 rows=108492 loops=1)
            -> Filter: (((c.CANCELLED like 1) or (c.DIVERTED like 1) or (c.AIR_SYSTEM_DELAY > 0) or (c.SECURITY_DELAY > 0) or (c.AIRLINE_DELAY > 0) or (c.LATE_AIRCRAFT_DELAY > 0) or (c.WEATHER_DELAY > 0)) and (c.Unique_flight is not null))  (cost=48402.90 rows=428841) (actual time=0.130..1417.555 rows=108492 loops=1)
                -> Table scan on c  (cost=48402.90 rows=478659) (actual time=0.120..599.068 rows=480000 loops=1)
            -> Filter: (char_length(r.ORIGIN_AIRPORT) = 3)  (cost=1.00 rows=1) (actual time=0.013..0.014 rows=1 loops=108492)
                -> Single-row index lookup on r using PRIMARY (Unique_flight=c.Unique_flight)  (cost=1.00 rows=1) (actual time=0.012..0.014 rows=1 loops=108492)

Explanation - 
After creating an index on Unique_flight, the joining criterion for this advanced query, we were able to cut the time by sorting and reordering the most complex primary key in the entire schema, which allowed for faster lookup to actually conduct the join. Our original time wa 2999 with each iteration taking 0.104 seconds of time, which was now cut down to 2818 overall and 0.099 seconds for every iteration.
Also unique_flight itself is quite dense of a joining key whose indexing helps cut run time quite easily. The runtime dropped in both cases: indexing for unique_flight in both red_flights and cancellation. Creating the composite indexing also cut the run time from 3.432 to 3.106. The most effective technique indexing technqiue would be indexing based on the join criteria - Unique_flight.




Advanced query 2: Determining reliable hubs for airlines

For a list of given airlines, the query looks at hubs (i.e. aiports with the maximum amount of flights of that airline coming in and out of it), and also determines the ones the airports that are punctual, i.e. average arrival delay of flights is less than or equal to 15 minutes.

EXPLAIN ANALYZE
SELECT ORIGIN_AIRPORT AS potential_hub
FROM red_flights
WHERE AIRLINE IN ("AA", "DL", "UA", "WN")
AND ORIGIN_AIRPORT IN (
    SELECT DESTINATION_AIRPORT
    FROM red_flights
    GROUP BY DESTINATION_AIRPORT
    HAVING CHAR_LENGTH(DESTINATION_AIRPORT) <= 3 AND AVG(ARRIVAL_DELAY) <= 15
)
GROUP BY ORIGIN_AIRPORT
ORDER BY COUNT(ORIGIN_AIRPORT) DESC
LIMIT 15;

WITHOUT INDEXING:

| -> Limit: 15 row(s)  (actual time=42258.303..42258.306 rows=15 loops=1)
    -> Sort: (count(red_flights.ORIGIN_AIRPORT) + count(red_flights.DESTINATION_AIRPORT)), limit input to 15 row(s) per chunk  (actual time=42258.302..42258.304 rows=15 loops=1)
        -> Table scan on <temporary>  (actual time=42258.143..42258.236 rows=165 loops=1)
            -> Aggregate using temporary table  (actual time=42258.137..42258.137 rows=165 loops=1)
                -> Filter: ((red_flights.airline in ('AA','DL','UA','WN')) and <in_optimizer>(red_flights.ORIGIN_AIRPORT,red_flights.ORIGIN_AIRPORT in (select #2)))  (cost=95025.65 rows=926114) (actual time=15004.697..36285.330 rows=506288 loops=1)
                    -> Table scan on red_flights  (cost=95025.65 rows=926114) (actual time=0.075..2506.531 rows=960000 loops=1)
                    -> Select #2 (subquery in condition; run only once)
                        -> Filter: ((red_flights.ORIGIN_AIRPORT = `<materialized_subquery>`.DESTINATION_AIRPORT))  (cost=0.00..0.00 rows=0) (actual time=0.033..0.033 rows=1 loops=514290)
                            -> Limit: 1 row(s)  (cost=0.00..0.00 rows=0) (actual time=0.032..0.032 rows=1 loops=514290)
                                -> Index lookup on <materialized_subquery> using <auto_distinct_key> (DESTINATION_AIRPORT=red_flights.ORIGIN_AIRPORT)  (actual time=0.031..0.031 rows=1 loops=514290)
                                    -> Materialize with deduplication  (cost=0.00..0.00 rows=0) (actual time=15004.602..15004.602 rows=314 loops=1)
                                        -> Filter: (avg(red_flights.ARRIVAL_DELAY) <= 15)  (actual time=15004.111..15004.430 rows=314 loops=1)
                                            -> Table scan on <temporary>  (actual time=15004.103..15004.283 rows=322 loops=1)
                                                -> Aggregate using temporary table  (actual time=15004.096..15004.096 rows=322 loops=1)
                                                    -> Filter: (char_length(red_flights.DESTINATION_AIRPORT) <= 3)  (cost=95025.65 rows=926114) (actual time=0.079..2151.710 rows=880000 loops=1)
                                                        -> Table scan on red_flights  (cost=95025.65 rows=926114) (actual time=0.078..1264.584 rows=960000 loops=1)


INDEXING ORIGIN AND DESTINATION AIRPORTS USING COMPOSITE:

| -> Limit: 15 row(s)  (actual time=27061.630..27061.633 rows=15 loops=1)
    -> Sort: (count(red_flights.ORIGIN_AIRPORT) + count(red_flights.DESTINATION_AIRPORT)), limit input to 15 row(s) per chunk  (actual time=27061.630..27061.631 rows=15 loops=1)
        -> Stream results  (cost=201886.34 rows=951221) (actual time=16472.100..27060.691 rows=165 loops=1)
            -> Group aggregate: count(red_flights.DESTINATION_AIRPORT), count(red_flights.ORIGIN_AIRPORT)  (cost=201886.34 rows=951221) (actual time=16472.094..27060.114 rows=165 loops=1)
                -> Filter: ((red_flights.airline in ('AA','DL','UA','WN')) and <in_optimizer>(red_flights.ORIGIN_AIRPORT,red_flights.ORIGIN_AIRPORT in (select #2)))  (cost=106764.24 rows=951221) (actual time=16467.965..26710.639 rows=506288 loops=1)
                    -> Index scan on red_flights using ind_org  (cost=106764.24 rows=951221) (actual time=0.693..10127.252 rows=960000 loops=1)
                    -> Select #2 (subquery in condition; run only once)
                        -> Filter: ((red_flights.ORIGIN_AIRPORT = `<materialized_subquery>`.DESTINATION_AIRPORT))  (cost=297008.54..297008.54 rows=1) (actual time=47.747..47.747 rows=1 loops=326)
                            -> Limit: 1 row(s)  (cost=297008.44..297008.44 rows=1) (actual time=47.745..47.745 rows=1 loops=326)
                                -> Index lookup on <materialized_subquery> using <auto_distinct_key> (DESTINATION_AIRPORT=red_flights.ORIGIN_AIRPORT)  (actual time=47.745..47.745 rows=1 loops=326)
                                    -> Materialize with deduplication  (cost=297008.44..297008.44 rows=951221) (actual time=15562.027..15562.027 rows=314 loops=1)
                                        -> Filter: (avg(red_flights.ARRIVAL_DELAY) <= 15)  (cost=201886.34 rows=951221) (actual time=1046.980..15559.328 rows=314 loops=1)
                                            -> Group aggregate: avg(red_flights.ARRIVAL_DELAY)  (cost=201886.34 rows=951221) (actual time=1046.973..15558.331 rows=322 loops=1)
                                                -> Filter: (char_length(red_flights.DESTINATION_AIRPORT) <= 3)  (cost=106764.24 rows=951221) (actual time=1042.483..14801.747 rows=880000 loops=1)
                                                    -> Index scan on red_flights using ind_des  (cost=106764.24 rows=951221) (actual time=1.190..14257.647 rows=960000 loops=1)

INDEXING ORIGIN AND DESTINATION AIRPORTS SEPARATELY (MOST OPTIMAL):

Limit: 15 row(s)  (actual time=21076.008..21076.011 rows=15 loops=1)
    -> Sort: (count(red_flights.ORIGIN_AIRPORT) + count(red_flights.DESTINATION_AIRPORT)), limit input to 15 row(s) per chunk  (actual time=21076.008..21076.009 rows=15 loops=1)
        -> Stream results  (cost=187637.05 rows=926114) (actual time=12522.389..21075.089 rows=165 loops=1)
            -> Group aggregate: count(red_flights.DESTINATION_AIRPORT), count(red_flights.ORIGIN_AIRPORT)  (cost=187637.05 rows=926114) (actual time=12522.383..21074.543 rows=165 loops=1)                -> Filter: ((red_flights.airline in ('AA','DL','UA','WN')) and <in_optimizer>(red_flights.ORIGIN_AIRPORT,red_flights.ORIGIN_AIRPORT in (select #2)))  (cost=95025.65 rows=926114) (actual time=12517.939..20979.957 rows=506288 loops=1)                    -> Index scan on red_flights using ind_org  (cost=95025.65 rows=926114) (actual time=0.613..8896.773 rows=960000 loops=1)                    -> Select #2 (subquery in condition; run only once)
                        -> Filter: ((red_flights.ORIGIN_AIRPORT = `<materialized_subquery>`.DESTINATION_AIRPORT))  (cost=280248.55..280248.55 rows=1) (actual time=33.906..33.906 rows=1 loops=326)                            -> Limit: 1 row(s)  (cost=280248.45..280248.45 rows=1) (actual time=33.905..33.905 rows=1 loops=326)
                                -> Index lookup on <materialized_subquery> using <auto_distinct_key> (DESTINATION_AIRPORT=red_flights.ORIGIN_AIRPORT)  (actual time=33.904..33.904 rows


INDEXING BASED ON ORIGIN_AIRPORT

-> Limit: 15 row(s)  (actual time=21008.628..21008.630 rows=15 loops=1)
    -> Sort: (count(red_flights.ORIGIN_AIRPORT) + count(red_flights.DESTINATION_AIRPORT)), limit input to 15 row(s) per chunk  (actual time=21008.627..21008.628 rows=15 loops=1)
        -> Stream results  (cost=201886.34 rows=951221) (actual time=10586.220..21007.645 rows=165 loops=1)
            -> Group aggregate: count(red_flights.DESTINATION_AIRPORT), count(red_flights.ORIGIN_AIRPORT)  (cost=201886.34 rows=951221) (actual time=10586.215..21007.034 rows=165 loops=1)
                -> Filter: ((red_flights.airline in ('AA','DL','UA','WN')) and <in_optimizer>(red_flights.ORIGIN_AIRPORT,red_flights.ORIGIN_AIRPORT in (select #2)))  (cost=106764.24 rows=951221) (actual time=10574.669..20458.762 rows=506288 loops=1)
                    -> Index scan on red_flights using ind_org  (cost=106764.24 rows=951221) (actual time=0.489..9721.893 rows=960000 loops=1)
                    -> Select #2 (subquery in condition; run only once)
                        -> Filter: ((red_flights.ORIGIN_AIRPORT = `<materialized_subquery>`.DESTINATION_AIRPORT))  (cost=297008.54..297008.54 rows=1) (actual time=29.364..29.364 rows=1 loops=326)
                            -> Limit: 1 row(s)  (cost=297008.44..297008.44 rows=1) (actual time=29.362..29.362 rows=1 loops=326)
                                -> Index lookup on <materialized_subquery> using <auto_distinct_key> (DESTINATION_AIRPORT=red_flights.ORIGIN_AIRPORT)  (actual time=29.361..29.361 rows=1 loops=326)
                                    -> Materialize with deduplication  (cost=297008.44..297008.44 rows=951221) (actual time=9569.110..9569.110 rows=314 loops=1)
                                        -> Filter: (avg(red_flights.ARRIVAL_DELAY) <= 15)  (cost=201886.34 rows=951221) (actual time=620.246..9567.102 rows=314 loops=1)
                                            -> Group aggregate: avg(red_flights.ARRIVAL_DELAY)  (cost=201886.34 rows=951221) (actual time=620.240..9566.214 rows=322 loops=1)
                                                -> Filter: (char_length(red_flights.DESTINATION_AIRPORT) <= 3)  (cost=106764.24 rows=951221) (actual time=617.765..9323.322 rows=880000 loops=1)
                                                    -> Index scan on red_flights using ind_des  (cost=106764.24 rows=951221) (actual time=0.481..8906.443 rows=960000 loops=1)

Explanation -

The most effective technique for indexing is creating 1 index for origin airport only, the joining criteria in the main query. The process of indexing each one of origin and destination airport took 30 seconds, and the query run time was reduced by approximately half. Composite indexing also cut the run time by about the same amount but took 5 minutes to index. The rationale behind choosing destination and origin airports is that these are the filtering and joining criterias for both the nested sub query and the main query, and indexing just IATA codes from the aiports table would not be effective since there are a very small number of unique IATA airport codes in the airport table.
